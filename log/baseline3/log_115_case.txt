code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let
Next Token :  , Posbility: 0.2871
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let 
Next Token : occurrence, Posbility: 0.1250
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrence
Next Token : s, Posbility: 0.8516
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences
Next Token :  =, Posbility: 0.4355
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
Next Token : 
, Posbility: 0.3945
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =

Next Token :   , Posbility: 0.8594
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  
Next Token : let, Posbility: 0.4648
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let
Next Token :  rec, Posbility: 0.5586
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec
Next Token :  , Posbility: 0.3223
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec 
Next Token : occurrence, Posbility: 0.3613
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrence
Next Token : s, Posbility: 0.8867
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences
Next Token :  , Posbility: 0.3145
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences 
Next Token : (, Posbility: 0.1758
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (
Next Token : tuple, Posbility: 0.1367
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuple
Next Token : s, Posbility: 0.7188
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples 
Next Token : :, Posbility: 0.9453
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples :
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : 
Next Token : List, Posbility: 0.3398
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List
Next Token : ., Posbility: 0.3750
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.
Next Token : t, Posbility: 0.8750
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t
Next Token : ), Posbility: 0.8555
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t)
Next Token :  =, Posbility: 0.5078
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =

Next Token :     , Posbility: 0.9492
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    
Next Token : match, Posbility: 0.5586
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match
Next Token :  tuple, Posbility: 0.6367
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuple
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with

Next Token :     , Posbility: 0.9375
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    |
Next Token :  [], Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | []
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] ->
Next Token :  , Posbility: 0.5898
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> 
Next Token : Dict, Posbility: 0.2051
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.
Next Token : empty, Posbility: 0.5352
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    |
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | 
Next Token : _, Posbility: 0.2598
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ 
Next Token : ->, Posbility: 0.6172
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
Next Token : 
, Posbility: 0.8438
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->

Next Token :       , Posbility: 0.6094
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      
Next Token : let, Posbility: 0.8047
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let
Next Token :  , Posbility: 0.3301
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let 
Next Token : (, Posbility: 0.2734
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (
Next Token : key, Posbility: 0.1089
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key
Next Token : ,, Posbility: 0.9062
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key,
Next Token :  , Posbility: 0.3828
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, 
Next Token : _, Posbility: 0.4258
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _
Next Token : ), Posbility: 0.8555
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _)
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) =
Next Token :  tuple, Posbility: 0.5977
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuple
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples
Next Token : ., Posbility: 0.7930
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.
Next Token : [0], Posbility: 0.8750
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0]
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in

Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      
Next Token : let, Posbility: 0.5312
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let
Next Token :  , Posbility: 0.4395
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let 
Next Token : occurrence, Posbility: 0.3379
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrence
Next Token : s, Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences
Next Token : ', Posbility: 0.3555
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences'
Next Token :  =, Posbility: 0.9023
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' =
Next Token :  , Posbility: 0.6328
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = 
Next Token : occurrence, Posbility: 0.8711
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrence
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences
Next Token :  , Posbility: 0.7852
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences 
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (
Next Token : List, Posbility: 0.5547
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.
Next Token : drop, Posbility: 0.4258
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop
Next Token :  1, Posbility: 0.8125
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1
Next Token :  tuple, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuple
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples)
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in

Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      
Next Token : Dict, Posbility: 0.4160
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.
Next Token : add, Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add 
Next Token : (, Posbility: 0.9258
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (
Next Token : key, Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key
Next Token : ,, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key,
Next Token :  , Posbility: 0.4453
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, 
Next Token : occurrence, Posbility: 0.7344
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrence
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences
Next Token : '), Posbility: 0.7773
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences')
Next Token :  tuple, Posbility: 0.4121
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuple
Next Token : s, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples
Next Token : ., Posbility: 0.7422
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.
Next Token : [0], Posbility: 0.8086
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
Next Token : 
, Posbility: 0.8438
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]

Next Token :   , Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  
Next Token : in, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
  
Next Token : occurrence, Posbility: 0.9570
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
  occurrence
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
  occurrences
Next Token :  [], Posbility: 0.4141
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
  occurrences []
Next Token : 
, Posbility: 0.5117
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
  occurrences []

Next Token : ;, Posbility: 0.1904
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
  occurrences []
;
Next Token : ;, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. *)
let occurrences =
  let rec occurrences (tuples : List.t) =
    match tuples with
    | [] -> Dict.empty
    | _ ->
      let (key, _) = tuples.[0] in
      let occurrences' = occurrences (List.drop 1 tuples) in
      Dict.add (key, occurrences') tuples.[0]
  in
  occurrences []
;;
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :3.8931169509887695

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>