code:
 (* Write a function to remove all elements from a given list present in another list. *)
let
Next Token :  rec, Posbility: 0.5547
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec
Next Token :  remove, Posbility: 0.5156
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove
Next Token : _, Posbility: 0.8711
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_
Next Token : all, Posbility: 0.1445
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all
Next Token :  , Posbility: 0.4629
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all 
Next Token : x, Posbility: 0.3223
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all x
Next Token : s, Posbility: 0.6133
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs 
Next Token : y, Posbility: 0.8711
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs y
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =

Next Token :   , Posbility: 0.8633
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  
Next Token : match, Posbility: 0.7148
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match 
Next Token : x, Posbility: 0.7188
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs
Next Token :  with, Posbility: 0.8945
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with

Next Token :   , Posbility: 0.9297
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  
Next Token : |, Posbility: 0.9453
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  |
Next Token :  [], Posbility: 0.9180
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | []
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] 
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] ->
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> 
Next Token : y, Posbility: 0.9648
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> y
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  |
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | 
Next Token : x, Posbility: 0.7109
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x 
Next Token : ::, Posbility: 0.9883
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x ::
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: 
Next Token : x, Posbility: 0.8594
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: x
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs
Next Token :  , Posbility: 0.5195
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs 
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
Next Token : 
, Posbility: 0.4746
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->

Next Token :     , Posbility: 0.5977
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    
Next Token : if, Posbility: 0.3281
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if 
Next Token : List, Posbility: 0.5586
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List
Next Token : ., Posbility: 0.9844
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.
Next Token : mem, Posbility: 0.7461
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem 
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x 
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x y
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys
Next Token :  then, Posbility: 0.9805
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then
Next Token :  remove, Posbility: 0.7305
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all 
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs 
Next Token : (, Posbility: 0.4941
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (
Next Token : List, Posbility: 0.6836
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.
Next Token : remove, Posbility: 0.7188
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x 
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x y
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys
Next Token : ), Posbility: 0.9492
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
Next Token : 
, Posbility: 0.6172
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)

Next Token :     , Posbility: 0.9570
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else 
Next Token : x, Posbility: 0.6562
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else x
Next Token : s, Posbility: 0.5273
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
Next Token : 
, Posbility: 0.5078
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs

Next Token :   , Posbility: 0.3555
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  
Next Token : |, Posbility: 0.4590
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  |
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  | 
Next Token : _, Posbility: 0.7461
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  | _
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  | _ 
Next Token : ->, Posbility: 0.8320
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  | _ ->
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  | _ -> 
Next Token : y, Posbility: 0.4316
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  | _ -> y
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to remove all elements from a given list present in another list. *)
let rec remove_all xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
    if List.mem x ys then remove_all xs (List.remove x ys)
    else xs
  | _ -> ys
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :3.3807930946350098

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>