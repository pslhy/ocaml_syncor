code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let
Next Token :  rec, Posbility: 0.3984
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec
Next Token :  find, Posbility: 0.3281
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_
Next Token : unique, Posbility: 0.2314
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique
Next Token : _, Posbility: 0.4551
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_
Next Token : element, Posbility: 0.5195
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element 
Next Token : arr, Posbility: 0.3301
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr
Next Token :  =, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
Next Token : 
, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =

Next Token :   , Posbility: 0.8164
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  
Next Token : match, Posbility: 0.4668
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match 
Next Token : arr, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr
Next Token :  with, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with

Next Token :   , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  
Next Token : |, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  |
Next Token :  [], Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | []
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] ->
Next Token :  , Posbility: 0.3105
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> 
Next Token : raise, Posbility: 0.4766
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise
Next Token :  Not, Posbility: 0.4824
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_
Next Token : found, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
Next Token : 
, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  |
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | 
Next Token : _, Posbility: 0.3770
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _
Next Token :  , Posbility: 0.7383
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ 
Next Token : ->, Posbility: 0.4727
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
Next Token : 
, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->

Next Token :     , Posbility: 0.6250
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    
Next Token : let, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let
Next Token :  , Posbility: 0.3418
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let 
Next Token : x, Posbility: 0.1338
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x
Next Token :  =, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x =
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = 
Next Token : arr, Posbility: 0.7383
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr
Next Token : ., Posbility: 0.7148
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.
Next Token : [0], Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0]
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    
Next Token : let, Posbility: 0.4043
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let
Next Token :  , Posbility: 0.4785
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let 
Next Token : y, Posbility: 0.1807
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y =
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = 
Next Token : arr, Posbility: 0.6406
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr
Next Token : ., Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.
Next Token : [, Posbility: 0.3848
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[
Next Token : 1., Posbility: 0.4141
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1.
Next Token : ., Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..
Next Token : ], Posbility: 0.4766
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..]
Next Token :  in, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    
Next Token : if, Posbility: 0.3691
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if 
Next Token : x, Posbility: 0.4434
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x
Next Token :  , Posbility: 0.4277
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x 
Next Token : <, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <
Next Token : >, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <>
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> 
Next Token : y, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y
Next Token : ., Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.
Next Token : [0], Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0]
Next Token :  then, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
Next Token : 
, Posbility: 0.4629
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then

Next Token :       , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      
Next Token : find, Posbility: 0.5859
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_
Next Token : unique, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_
Next Token : element, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element 
Next Token : y, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
Next Token : 
, Posbility: 0.6836
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y

Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else

Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      
Next Token : find, Posbility: 0.2715
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_
Next Token : unique, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_
Next Token : element, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_element
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_element 
Next Token : x, Posbility: 0.3965
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_element x
Next Token : 
, Posbility: 0.2578
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_element x

Next Token :   , Posbility: 0.3340
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_element x
  
Next Token : ;, Posbility: 0.6133
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_element x
  ;
Next Token : ;, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find the element that appears only once in a sorted array. *)
let rec find_unique_element arr =
  match arr with
  | [] -> raise Not_found
  | _ ->
    let x = arr.[0] in
    let y = arr.[1..] in
    if x <> y.[0] then
      find_unique_element y
    else
      find_unique_element x
  ;;
Error type: synerr_stop
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :3.6192455291748047

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>