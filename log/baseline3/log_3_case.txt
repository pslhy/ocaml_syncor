code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let
Next Token :  , Posbility: 0.2354
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let 
Next Token : diff, Posbility: 0.5430
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff
Next Token : _, Posbility: 0.6016
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_
Next Token : bit, Posbility: 0.4707
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit
Next Token : _, Posbility: 0.4043
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_
Next Token : pos, Posbility: 0.3594
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos =
Next Token :  function, Posbility: 0.3711
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
Next Token : 
, Posbility: 0.6641
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function

Next Token :   , Posbility: 0.7578
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  
Next Token : |, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  |
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | 
Next Token : x, Posbility: 0.2910
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x
Next Token :  , Posbility: 0.4160
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x 
Next Token : ::, Posbility: 0.3438
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x ::
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: 
Next Token : x, Posbility: 0.3164
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: x
Next Token : s, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs
Next Token :  , Posbility: 0.4883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs 
Next Token : ->, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs ->
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> 
Next Token : y, Posbility: 0.4238
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y 
Next Token : ::, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: 
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: y
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys ->
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> 
Next Token : x, Posbility: 0.2832
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x
Next Token :  , Posbility: 0.4883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x 
Next Token : <, Posbility: 0.5469
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <
Next Token : >, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <>
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
Next Token : 
, Posbility: 0.4883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y

Next Token :   , Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  
Next Token : |, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  |
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | 
Next Token : _, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ 
Next Token : ->, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ ->
Next Token :  false, Posbility: 0.5391
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
Next Token : 
, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false

Next Token : in, Posbility: 0.5234
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
Next Token : 
, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in

Next Token : let, Posbility: 0.6484
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let
Next Token :  rec, Posbility: 0.4180
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec
Next Token :  , Posbility: 0.3828
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec 
Next Token : diff, Posbility: 0.6797
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff
Next Token : _, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_
Next Token : bit, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_
Next Token : pos, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos
Next Token : _, Posbility: 0.6562
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_
Next Token : aux, Posbility: 0.2227
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux
Next Token :  , Posbility: 0.7305
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux 
Next Token : x, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x 
Next Token : y, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y
Next Token :  =, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
Next Token : 
, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =

Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  
Next Token : if, Posbility: 0.4746
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if 
Next Token : x, Posbility: 0.6250
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x
Next Token :  =, Posbility: 0.6641
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x =
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y
Next Token :  then, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then
Next Token :  false, Posbility: 0.7930
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
Next Token : 
, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  
Next Token : else, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else
Next Token :  , Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else 
Next Token : if, Posbility: 0.6250
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 0.6172
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 0.6562
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 0.4336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : in, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in

Next Token : let, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let
Next Token :  , Posbility: 0.4883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let 
Next Token : diff, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_
Next Token : bit, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos
Next Token : _, Posbility: 0.5664
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_
Next Token : iter, Posbility: 0.1045
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter 
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
Next Token : 
, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =

Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  
Next Token : if, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if 
Next Token : x, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x
Next Token :  =, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x =
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y
Next Token :  then, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then
Next Token :  false, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else 
Next Token : if, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 0.9414
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.6211
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : in, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in

Next Token : let, Posbility: 0.8047
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let
Next Token :  , Posbility: 0.5039
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let 
Next Token : diff, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_
Next Token : bit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos
Next Token : _, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_
Next Token : iter, Posbility: 0.2793
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter
Next Token : _, Posbility: 0.5039
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.1348
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  
Next Token : if, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then
Next Token :  false, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 0.3418
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 0.6641
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.3398
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.7891
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.4062
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.4707
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 0.0850
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  
Next Token : if, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 0.6875
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.7773
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.6484
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 0.7383
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 0.5234
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  
Next Token : if, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else 
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <>
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then
Next Token :  true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else 
Next Token : diff, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_
Next Token : bit, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_
Next Token : aux, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)

Next Token : let, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let 
Next Token : diff, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_
Next Token : bit, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_
Next Token : iter, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then
Next Token :  false, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether the two numbers differ at one bit position only or not. *)
let diff_bit_pos = function
  | x :: xs -> y :: ys -> x <> y
  | _ -> false
in
let rec diff_bit_pos_aux x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
in
let diff_bit_pos_iter_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false
  else if x <> y then true
  else diff_bit_pos_aux (x - 1) (y - 1)
let diff_bit_pos_iter_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x y =
  if x = y then false



<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>