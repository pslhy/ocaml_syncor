code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let
Next Token :  rec, Posbility: 0.3574
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec
Next Token :  , Posbility: 0.2471
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec 
Next Token : diff, Posbility: 0.3086
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff
Next Token : _, Posbility: 0.3984
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_
Next Token : helper, Posbility: 0.1572
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper
Next Token :  , Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper 
Next Token : s, Posbility: 0.3672
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s
Next Token :  , Posbility: 0.2559
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s 
Next Token : n, Posbility: 0.1729
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n
Next Token :  =, Posbility: 0.5039
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =

Next Token :   , Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  
Next Token : if, Posbility: 0.5430
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if 
Next Token : n, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n
Next Token :  =, Posbility: 0.5508
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n =
Next Token :  0, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0
Next Token :  then, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
Next Token : 
, Posbility: 0.3477
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then

Next Token :     , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    
Next Token : let, Posbility: 0.2363
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let 
Next Token : n, Posbility: 0.1416
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n
Next Token :  =, Posbility: 0.4102
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n =
Next Token :  , Posbility: 0.3555
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = 
Next Token : s, Posbility: 0.2793
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s
Next Token : ., Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.
Next Token : Length, Posbility: 0.5898
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length
Next Token :  in, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in

Next Token :     , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    
Next Token : let, Posbility: 0.4590
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let
Next Token :  , Posbility: 0.5234
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let 
Next Token : n, Posbility: 0.2734
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n =
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = 
Next Token : s, Posbility: 0.2617
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s
Next Token : ., Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.
Next Token : Index, Posbility: 0.3867
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.Index
Next Token : Of, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf
Next Token : (', Posbility: 0.3066
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('
Next Token : 0, Posbility: 0.6289
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0
Next Token : '), Posbility: 0.7891
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0')
Next Token :  in, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in

Next Token :     , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    
Next Token : let, Posbility: 0.5195
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let 
Next Token : n, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n =
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = 
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.
Next Token : Index, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf
Next Token : (', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1')
Next Token :  in, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in

Next Token :     , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    
Next Token : if, Posbility: 0.3516
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if 
Next Token : n, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n
Next Token :  =, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n =
Next Token :  -1, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1
Next Token :  then, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
Next Token : 
, Posbility: 0.4062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then

Next Token :       , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      
Next Token : 0, Posbility: 0.6250
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
Next Token : 
, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else

Next Token :       , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      
Next Token : n, Posbility: 0.3477
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n 
Next Token : -, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n -
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - 
Next Token : s, Posbility: 0.7539
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.
Next Token : Index, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.Index
Next Token : Of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf
Next Token : (', Posbility: 0.6719
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('
Next Token : 0, Posbility: 0.8125
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0
Next Token : '), Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
Next Token : 
, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')

Next Token :   , Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else

Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let 
Next Token : n, Posbility: 0.5781
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n
Next Token :  =, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n =
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = 
Next Token : s, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.
Next Token : Index, Posbility: 0.4805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.Index
Next Token : Of, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf
Next Token : (', Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('
Next Token : 0, Posbility: 0.8086
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0
Next Token : '), Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0')
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let 
Next Token : n, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n =
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = 
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.
Next Token : Index, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf
Next Token : (', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1
Next Token : '), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1')
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    
Next Token : if, Posbility: 0.4746
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if 
Next Token : n, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n
Next Token :  =, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n =
Next Token :  -1, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1
Next Token :  then, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      
Next Token : diff, Posbility: 0.3691
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_
Next Token : helper, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper 
Next Token : s, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s 
Next Token : (, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n
Next Token :  , Posbility: 0.4844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n 
Next Token : -, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n -
Next Token :  1), Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
Next Token : 
, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      
Next Token : let, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let 
Next Token : n, Posbility: 0.4414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n
Next Token :  =, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n =
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = 
Next Token : s, Posbility: 0.6172
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.
Next Token : Index, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.Index
Next Token : Of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf
Next Token : (', Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('
Next Token : 0, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0
Next Token : '), Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0')
Next Token :  in, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      
Next Token : let, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let 
Next Token : n, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = 
Next Token : s, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.
Next Token : Index, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf
Next Token : (', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1
Next Token : '), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1')
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      
Next Token : let, Posbility: 0.3438
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let 
Next Token : n, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n
Next Token :  =, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n =
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = 
Next Token : s, Posbility: 0.3848
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.
Next Token : Index, Posbility: 0.6328
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.Index
Next Token : Of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf
Next Token : (', Posbility: 0.7773
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('
Next Token : 0, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.4863
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.3320
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.4160
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('
Next Token : 0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0
Next Token : ',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.
Next Token : Index, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.Index
Next Token : Of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf
Next Token : (', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('
Next Token : 1',, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1',
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n +
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. *)
let rec diff_helper s n =
  if n = 0 then
    let n = s.Length in
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      0
    else
      n - s.IndexOf('0')
  else
    let n = s.IndexOf('0') in
    let n = s.IndexOf('1') in
    if n = -1 then
      diff_helper s (n - 1)
    else
      let n = s.IndexOf('0') in
      let n = s.IndexOf('1') in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = s.IndexOf('0', n + 1) in
      let n = s.IndexOf('1', n + 1) in
      let n = 


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>