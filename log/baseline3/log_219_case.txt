code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let
Next Token :  , Posbility: 0.3652
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let 
Next Token : common, Posbility: 0.6250
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common
Next Token : _, Posbility: 0.6250
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_
Next Token : element, Posbility: 0.5039
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element
Next Token :  , Posbility: 0.4785
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element 
Next Token : x, Posbility: 0.5664
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x 
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
Next Token : 
, Posbility: 0.7422
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =

Next Token :   , Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  
Next Token : let, Posbility: 0.4844
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let
Next Token :  rec, Posbility: 0.4004
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec
Next Token :  , Posbility: 0.4629
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec 
Next Token : helper, Posbility: 0.2256
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper 
Next Token : x, Posbility: 0.7578
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x 
Next Token : y, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y
Next Token :  =, Posbility: 0.5547
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =

Next Token :     , Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    
Next Token : match, Posbility: 0.5078
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match 
Next Token : x, Posbility: 0.7891
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x
Next Token :  with, Posbility: 0.5938
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with

Next Token :     , Posbility: 0.9297
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    
Next Token : |, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    |
Next Token :  [], Posbility: 0.9062
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | []
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] 
Next Token : ->, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] ->
Next Token :  , Posbility: 0.4199
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> 
Next Token : y, Posbility: 0.5352
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
Next Token : 
, Posbility: 0.5156
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    |
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | 
Next Token : x, Posbility: 0.4004
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x
Next Token : ::, Posbility: 0.4902
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::
Next Token : x, Posbility: 0.6406
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::x
Next Token : s, Posbility: 0.8867
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs 
Next Token : ->, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
Next Token : 
, Posbility: 0.5664
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->

Next Token :         , Posbility: 0.7109
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        
Next Token : match, Posbility: 0.4824
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match 
Next Token : y, Posbility: 0.8633
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with

Next Token :         , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        |
Next Token :  [], Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | []
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] ->
Next Token :  false, Posbility: 0.8555
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        |
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | 
Next Token : y, Posbility: 0.8789
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::
Next Token : y, Posbility: 0.9492
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::y
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
Next Token : 
, Posbility: 0.4883
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->

Next Token :             , Posbility: 0.9219
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            
Next Token : if, Posbility: 0.4434
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if 
Next Token : x, Posbility: 0.8320
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x
Next Token :  =, Posbility: 0.8242
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = 
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y
Next Token :  then, Posbility: 0.8789
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then
Next Token :  true, Posbility: 0.8906
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
Next Token : 
, Posbility: 0.8125
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true

Next Token :             , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else 
Next Token : helper, Posbility: 0.8984
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper 
Next Token : x, Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper x
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs 
Next Token : y, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs y
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys

Next Token :   , Posbility: 0.5312
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  
Next Token : in, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in
Next Token : 
, Posbility: 0.9258
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in

Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in
  
Next Token : helper, Posbility: 0.9375
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in
  helper
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in
  helper 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in
  helper x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in
  helper x 
Next Token : y, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes two lists and returns true if they have at least one common element. *)
let common_element x y =
  let rec helper x y =
    match x with
    | [] -> y
    | x::xs ->
        match y with
        | [] -> false
        | y::ys ->
            if x = y then true
            else helper xs ys
  in
  helper x y
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :4.119593381881714

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>