code:
 (* Write a  function to count true booleans in the given list. *)
let
Next Token :  count, Posbility: 0.3594
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count
Next Token : _, Posbility: 0.8594
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_
Next Token : true, Posbility: 0.8047
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_true
Next Token : s, Posbility: 0.4355
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues
Next Token :  , Posbility: 0.4473
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues 
Next Token : x, Posbility: 0.4766
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x
Next Token :  =, Posbility: 0.6641
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
Next Token : 
, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =

Next Token :   , Posbility: 0.8711
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  
Next Token : let, Posbility: 0.5352
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let
Next Token :  rec, Posbility: 0.3730
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec
Next Token :  count, Posbility: 0.4238
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count
Next Token : _, Posbility: 0.5938
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_
Next Token : true, Posbility: 0.4199
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_true
Next Token : s, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues
Next Token :  , Posbility: 0.3164
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues 
Next Token : x, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x
Next Token :  =, Posbility: 0.3984
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
Next Token : 
, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =

Next Token :     , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    
Next Token : match, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match 
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with

Next Token :     , Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    
Next Token : |, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    |
Next Token :  [], Posbility: 0.8398
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | []
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] ->
Next Token :  0, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    |
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | 
Next Token : _, Posbility: 0.3984
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _
Next Token :  , Posbility: 0.7500
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ 
Next Token : ::, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ ::
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: 
Next Token : x, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: x
Next Token : s, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs 
Next Token : ->, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->

Next Token :         , Posbility: 0.6836
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        
Next Token : let, Posbility: 0.3711
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let
Next Token :  , Posbility: 0.3594
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let 
Next Token : x, Posbility: 0.2393
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x
Next Token :  =, Posbility: 0.5000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x =
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = 
Next Token : x, Posbility: 0.6328
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = x
Next Token : s, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs
Next Token : [0], Posbility: 0.5195
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0]
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        
Next Token : if, Posbility: 0.3672
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if 
Next Token : x, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x
Next Token :  then, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then
Next Token :  count, Posbility: 0.5508
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_
Next Token : true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_true
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues 
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs
Next Token :  else, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else
Next Token :  count, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_
Next Token : true, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_true
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues 
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs

Next Token :   , Posbility: 0.8477
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  
Next Token : in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in

Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
  
Next Token : count, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
  count
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
  count_
Next Token : true, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
  count_true
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
  count_trues
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
  count_trues 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count true booleans in the given list. *)
let count_trues x =
  let rec count_trues x =
    match x with
    | [] -> 0
    | _ :: xs ->
        let x = xs[0] in
        if x then count_trues xs else count_trues xs
  in
  count_trues x
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :3.706697702407837

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>