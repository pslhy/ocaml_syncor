code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let
Next Token :  rec, Posbility: 0.6836
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec
Next Token :  , Posbility: 0.4082
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec 
Next Token : insert, Posbility: 0.1152
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert
Next Token : _, Posbility: 0.6133
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_
Next Token : pos, Posbility: 0.0796
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos
Next Token :  , Posbility: 0.4004
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos 
Next Token : (, Posbility: 0.2021
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (
Next Token : x, Posbility: 0.1025
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x
Next Token :  , Posbility: 0.3457
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x 
Next Token : :, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x :
Next Token :  int, Posbility: 0.6406
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int
Next Token : ), Posbility: 0.6250
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int)
Next Token :  , Posbility: 0.7852
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) 
Next Token : (, Posbility: 0.7695
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (
Next Token : v, Posbility: 0.0728
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v :
Next Token :  int, Posbility: 0.8828
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int
Next Token :  list, Posbility: 0.6641
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list)
Next Token :  =, Posbility: 0.6172
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
Next Token : 
, Posbility: 0.8945
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =

Next Token :   , Posbility: 0.8633
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  
Next Token : match, Posbility: 0.5508
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match
Next Token :  , Posbility: 0.4805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match 
Next Token : x, Posbility: 0.4863
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x
Next Token :  with, Posbility: 0.8633
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with

Next Token :   , Posbility: 0.8750
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  |
Next Token :  0, Posbility: 0.6484
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 
Next Token : ->, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 ->
Next Token :  , Posbility: 0.4648
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> 
Next Token : if, Posbility: 0.2158
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if
Next Token :  v, Posbility: 0.6641
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v
Next Token :  =, Posbility: 0.8008
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v =
Next Token :  [], Posbility: 0.5977
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = []
Next Token :  then, Posbility: 0.8984
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then
Next Token :  , Posbility: 0.3711
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then 
Next Token : return, Posbility: 0.3789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return
Next Token :  0, Posbility: 0.4668
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0
Next Token :  else, Posbility: 0.7188
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else 
Next Token : return, Posbility: 0.4941
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return
Next Token :  , Posbility: 0.4941
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return 
Next Token : x, Posbility: 0.2891
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
Next Token : 
, Posbility: 0.5000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x

Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  |
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | 
Next Token : _, Posbility: 0.6367
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ 
Next Token : ->, Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ ->
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> 
Next Token : let, Posbility: 0.4883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let 
Next Token : x, Posbility: 0.1514
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x
Next Token :  =, Posbility: 0.3125
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x =
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = 
Next Token : x, Posbility: 0.7578
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x 
Next Token : -, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x -
Next Token :  1, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1
Next Token :  in, Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
Next Token : 
, Posbility: 0.5664
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in

Next Token :     , Posbility: 0.5625
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    
Next Token : if, Posbility: 0.5195
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if
Next Token :  v, Posbility: 0.7695
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v
Next Token :  =, Posbility: 0.5938
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v =
Next Token :  [], Posbility: 0.9180
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = []
Next Token :  then, Posbility: 0.8984
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then 
Next Token : return, Posbility: 0.9102
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return 
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
Next Token : 
, Posbility: 0.7148
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    
Next Token : else, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else 
Next Token : if, Posbility: 0.7695
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if
Next Token :  v, Posbility: 0.7969
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v
Next Token :  =, Posbility: 0.4395
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v =
Next Token :  [, Posbility: 0.7109
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [
Next Token : x, Posbility: 0.4707
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x
Next Token : ], Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x]
Next Token :  then, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then 
Next Token : return, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return 
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
Next Token : 
, Posbility: 0.4492
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x

Next Token :     , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else 
Next Token : if, Posbility: 0.6406
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if
Next Token :  v, Posbility: 0.7188
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v
Next Token :  =, Posbility: 0.7188
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v =
Next Token :  [, Posbility: 0.9219
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [
Next Token : x, Posbility: 0.7031
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x 
Next Token : ;, Posbility: 0.4004
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ;
Next Token :  , Posbility: 0.7109
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; 
Next Token : _, Posbility: 0.6250
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _
Next Token : ], Posbility: 0.8477
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _]
Next Token :  then, Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then 
Next Token : return, Posbility: 0.8672
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return 
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else 
Next Token : if, Posbility: 0.7500
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if
Next Token :  v, Posbility: 0.8711
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v
Next Token :  =, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.8125
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; 
Next Token : x, Posbility: 0.9336
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x
Next Token : ], Posbility: 0.6172
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x]
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then 
Next Token : return, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return 
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
Next Token : 
, Posbility: 0.7383
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else 
Next Token : if, Posbility: 0.7617
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9141
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.6719
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; 
Next Token : x, Posbility: 0.7227
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ;
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; 
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _
Next Token : ], Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _]
Next Token :  then, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then 
Next Token : return, Posbility: 0.9023
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return 
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
Next Token : 
, Posbility: 0.8281
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x

Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.5469
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.8672
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.4766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.4941
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : x, Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x
Next Token : ], Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x]
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then 
Next Token : return, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.7617
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.7227
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ;
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _
Next Token : ], Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _]
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then 
Next Token : return, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x

Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.6641
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9453
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.7109
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x
Next Token : ], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then 
Next Token : return, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.7930
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.8633
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _
Next Token : ], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.7773
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.7930
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.7891
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.7891
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.8242
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.8203
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.8555
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 0.5000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.8711
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.8203
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 0.5000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.9023
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 0.7773
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.7852
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.8750
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 0.7305
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.8320
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.9102
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token : ], Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else 
Next Token : if, Posbility: 0.8125
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if
Next Token :  v, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v =
Next Token :  [, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; 
Next Token : x, Posbility: 0.5625
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; 
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _
Next Token : ], Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _]
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then 
Next Token : return, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else 
Next Token : if, Posbility: 0.8945
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if
Next Token :  v, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v =
Next Token :  [, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ 
Next Token : ;, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ;
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the right insertion point for a specified value in sorted order. *)
let rec insert_pos (x : int) (v : int list) =
  match x with
  | 0 -> if v = [] then return 0 else return x
  | _ -> let x = x - 1 in
    if v = [] then return x
    else if v = [x] then return x
    else if v = [x ; _] then return x
    else if v = [_ ; x] then return x
    else if v = [_ ; x ; _] then return x
    else if v = [_ ; _ ; x] then return x
    else if v = [_ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; _ ; x ; _] then return x
    else if v = [_ ; _ ; _ ; _ ; _ ; _


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>