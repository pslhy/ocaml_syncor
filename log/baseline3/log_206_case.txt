code:
 (* Write a function to find common first element in given list of tuple. *)
let
Next Token :  rec, Posbility: 0.5078
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec
Next Token :  , Posbility: 0.4277
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec 
Next Token : common, Posbility: 0.4082
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common
Next Token : _, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_
Next Token : first, Posbility: 0.4844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first
Next Token : _, Posbility: 0.4590
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_
Next Token : element, Posbility: 0.6484
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element
Next Token :  , Posbility: 0.4824
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element 
Next Token : x, Posbility: 0.2100
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element x
Next Token : s, Posbility: 0.6523
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs
Next Token :  =, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
Next Token : 
, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =

Next Token :   , Posbility: 0.8008
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  
Next Token : match, Posbility: 0.6172
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match 
Next Token : x, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with

Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  
Next Token : |, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  |
Next Token :  [], Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | []
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] ->
Next Token :  , Posbility: 0.2656
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> 
Next Token : raise, Posbility: 0.3105
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise
Next Token :  Not, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_
Next Token : found, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
Next Token : 
, Posbility: 0.7070
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  |
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | 
Next Token : x, Posbility: 0.3945
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x 
Next Token : ::, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x ::
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: 
Next Token : x, Posbility: 0.7656
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: x
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs 
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs ->
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> 
Next Token : x, Posbility: 0.5039
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
Next Token : 
, Posbility: 0.4375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x

Next Token : let, Posbility: 0.5391
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let
Next Token :  rec, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec
Next Token :  , Posbility: 0.5469
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec 
Next Token : common, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_
Next Token : first, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_
Next Token : element, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element
Next Token : _, Posbility: 0.5625
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_
Next Token : opt, Posbility: 0.1260
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =

Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  
Next Token : match, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match 
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.5508
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.4473
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.7188
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.2988
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.6523
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.1514
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  
Next Token : match, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match 
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.5430
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.5078
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.5781
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.4746
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.6562
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 0.2695
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  
Next Token : match, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.5469
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.6719
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.5664
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.6523
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.7500
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.4961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs ->
Next Token :  Some, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x

Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let
Next Token :  rec, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec 
Next Token : common, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_
Next Token : first, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_
Next Token : element, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt
Next Token :  , Posbility: 0.5898
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find common first element in given list of tuple. *)
let rec common_first_element xs =
  match xs with
  | [] -> raise Not_found
  | x :: xs -> x
let rec common_first_element_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None
  | x :: xs -> Some x
let rec common_first_element_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt_opt xs =
  match xs with
  | [] -> None


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>