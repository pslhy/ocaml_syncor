code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let
Next Token :  rec, Posbility: 0.4160
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec
Next Token :  , Posbility: 0.4473
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec 
Next Token : digits, Posbility: 0.2773
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits
Next Token :  =, Posbility: 0.4258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits =
Next Token :  function, Posbility: 0.7109
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
Next Token : 
, Posbility: 0.6250
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function

Next Token :   , Posbility: 0.7227
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  
Next Token : |, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  |
Next Token :  0, Posbility: 0.4785
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 
Next Token : ->, Posbility: 0.7656
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 ->
Next Token :  0, Posbility: 0.6289
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  |
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | 
Next Token : n, Posbility: 0.3945
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n 
Next Token : ->, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n ->
Next Token :  , Posbility: 0.4453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> 
Next Token : n, Posbility: 0.6758
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n
Next Token :  +, Posbility: 0.4453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n +
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + 
Next Token : digits, Posbility: 0.8477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits 
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (
Next Token : n, Posbility: 0.7812
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n 
Next Token : /, Posbility: 0.8008
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n /
Next Token :  10), Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
Next Token : 
, Posbility: 0.5234
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)

Next Token : let, Posbility: 0.2080
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let
Next Token :  rec, Posbility: 0.4043
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec
Next Token :  , Posbility: 0.4121
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec 
Next Token : digits, Posbility: 0.4766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits
Next Token : _, Posbility: 0.6289
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_
Next Token : of, Posbility: 0.1211
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_
Next Token : int, Posbility: 0.2773
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int
Next Token :  =, Posbility: 0.4707
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int =
Next Token :  function, Posbility: 0.6680
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
Next Token : 
, Posbility: 0.6797
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function

Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  |
Next Token :  0, Posbility: 0.7500
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 ->
Next Token :  0, Posbility: 0.7422
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  |
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | 
Next Token : n, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n ->
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> 
Next Token : digits, Posbility: 0.7148
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits 
Next Token : (, Posbility: 0.5625
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (
Next Token : n, Posbility: 0.8516
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n
Next Token :  %, Posbility: 0.6680
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n %
Next Token :  10), Posbility: 0.9453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
Next Token : 
, Posbility: 0.4668
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)

Next Token : let, Posbility: 0.8125
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let
Next Token :  rec, Posbility: 0.5547
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec
Next Token :  , Posbility: 0.4414
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec 
Next Token : digits, Posbility: 0.7773
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_
Next Token : of, Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_
Next Token : int, Posbility: 0.4062
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int
Next Token : _, Posbility: 0.7109
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_
Next Token : list, Posbility: 0.0889
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list
Next Token :  =, Posbility: 0.9062
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list =
Next Token :  function, Posbility: 0.8867
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  |
Next Token :  [], Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | []
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] ->
Next Token :  0, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  |
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | 
Next Token : n, Posbility: 0.4258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n 
Next Token : ::, Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n ::
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: 
Next Token : ns, Posbility: 0.5664
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns ->
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> 
Next Token : digits, Posbility: 0.8438
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits
Next Token : _, Posbility: 0.5547
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int 
Next Token : (, Posbility: 0.8477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (
Next Token : n, Posbility: 0.6719
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n
Next Token :  %, Posbility: 0.3105
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n %
Next Token :  10), Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10)
Next Token :  +, Posbility: 0.6211
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) +
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + 
Next Token : digits, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list 
Next Token : ns, Posbility: 0.8125
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
Next Token : 
, Posbility: 0.6523
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns

Next Token : let, Posbility: 0.7695
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let
Next Token :  rec, Posbility: 0.6484
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec
Next Token :  , Posbility: 0.5781
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec 
Next Token : digits, Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_
Next Token : of, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_
Next Token : int, Posbility: 0.7070
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_
Next Token : list, Posbility: 0.4980
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list
Next Token : _, Posbility: 0.8672
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.1514
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt =
Next Token :  function, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  |
Next Token :  [], Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | []
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] ->
Next Token :  None, Posbility: 0.4688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  |
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | 
Next Token : n, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns ->
Next Token :  Some, Posbility: 0.6172
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some 
Next Token : (, Posbility: 0.8750
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (
Next Token : digits, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n
Next Token :  %, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n %
Next Token :  10), Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10)
Next Token :  +, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) +
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + 
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)

Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let
Next Token :  rec, Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec 
Next Token : digits, Posbility: 0.8828
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_
Next Token : of, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_
Next Token : int, Posbility: 0.8320
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_
Next Token : list, Posbility: 0.5547
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.3477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.7031
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.1318
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 0.8555
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn =
Next Token :  function, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  |
Next Token :  [], Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | []
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] ->
Next Token :  None, Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.2930
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 0.8242
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 0.5117
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 0.8125
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 0.7188
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 0.6797
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt 
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns

Next Token :    , Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with 
Next Token : _, Posbility: 0.4277
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ ->
Next Token :  None, Posbility: 0.7969
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
Next Token : 
, Posbility: 0.7188
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None

Next Token : let, Posbility: 0.7539
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9414
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.7227
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9062
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.7539
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.4238
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.8398
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.6953
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 0.1338
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn =
Next Token :  function, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  |
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 0.9414
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.9180
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 0.8164
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns

Next Token :    , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with 
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ ->
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.6133
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None

Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.8906
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.8125
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9414
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.8086
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.7266
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 0.7500
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 0.7461
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 0.4023
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn =
Next Token :  function, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  |
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns

Next Token :    , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with 
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ ->
Next Token :  None, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None

Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9023
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.8633
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.8906
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.9102
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 0.8867
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn =
Next Token :  function, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns

Next Token :    , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None

Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9023
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.9062
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn =
Next Token :  function, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns

Next Token :    , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None

Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9141
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.9375
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn =
Next Token :  function, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns

Next Token :    , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.7500
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None

Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9258
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn =
Next Token :  function, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns

Next Token :    , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None

Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9414
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn =
Next Token :  function, Posbility: 0.9453
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns

Next Token :    , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None

Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.9648
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn =
Next Token :  function, Posbility: 0.8477
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9219
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns

Next Token :    , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
   
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with 
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
Next Token : 
, Posbility: 0.8164
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None

Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec 
Next Token : digits, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_
Next Token : int, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_
Next Token : list, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_
Next Token : opt, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_
Next Token : ex, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn =
Next Token :  function, Posbility: 0.8320
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] ->
Next Token :  None, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | 
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n 
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n ::
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    
Next Token : try, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_
Next Token : int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_
Next Token : ex, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_ex
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn 
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get the sum of the digits of a non-negative integer. *)
let rec digits = function
  | 0 -> 0
  | n -> n + digits (n / 10)
let rec digits_of_int = function
  | 0 -> 0
  | n -> digits (n % 10)
let rec digits_of_int_list = function
  | [] -> 0
  | n :: ns -> digits_of_int (n % 10) + digits_of_int_list ns
let rec digits_of_int_list_opt = function
  | [] -> None
  | n :: ns -> Some (digits_of_int (n % 10) + digits_of_int_list_opt ns)
let rec digits_of_int_list_opt_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn ns
    with _ -> None
let rec digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn_exn = function
  | [] -> None
  | n :: ns ->
    try
      digits_of_int_list_opt_exn_exn_exn_exn_exn_exn_exn_exn_exn ns


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>