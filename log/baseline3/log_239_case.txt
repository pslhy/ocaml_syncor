code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let
Next Token :  , Posbility: 0.3086
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let 
Next Token : sale, Posbility: 0.1406
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale
Next Token : _, Posbility: 0.7422
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_
Next Token : loss, Posbility: 0.5508
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss
Next Token : _, Posbility: 0.2832
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_
Next Token : amount, Posbility: 0.5469
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount
Next Token :  , Posbility: 0.4121
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount 
Next Token : (, Posbility: 0.2002
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (
Next Token : amount, Posbility: 0.3320
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount
Next Token : ,, Posbility: 0.5117
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount,
Next Token :  , Posbility: 0.3809
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, 
Next Token : sale, Posbility: 0.1709
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale
Next Token : _, Posbility: 0.5977
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_
Next Token : type, Posbility: 0.1846
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type
Next Token : ), Posbility: 0.9219
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type)
Next Token :  =, Posbility: 0.8477
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
Next Token : 
, Posbility: 0.8320
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =

Next Token :   , Posbility: 0.7969
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  
Next Token : match, Posbility: 0.6484
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match 
Next Token : sale, Posbility: 0.9844
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_
Next Token : type, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type
Next Token :  with, Posbility: 0.9844
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with

Next Token :   , Posbility: 0.8086
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  |
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | 
Next Token : Sale, Posbility: 0.1230
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | Sale
Next Token : Type, Posbility: 0.5195
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType
Next Token : ., Posbility: 0.9102
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.
Next Token : Regular, Posbility: 0.0374
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular 
Next Token : ->, Posbility: 0.9805
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular ->
Next Token :  amount, Posbility: 0.2656
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
Next Token : 
, Posbility: 0.5586
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  |
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | 
Next Token : Sale, Posbility: 0.9922
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | Sale
Next Token : Type, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.
Next Token : Special, Posbility: 0.1025
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special 
Next Token : ->, Posbility: 0.9766
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special ->
Next Token :  0, Posbility: 0.4453
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
Next Token : 
, Posbility: 0.5078
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0

Next Token : let, Posbility: 0.4355
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let
Next Token :  , Posbility: 0.3809
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let 
Next Token : sale, Posbility: 0.1992
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_
Next Token : loss, Posbility: 0.5703
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss
Next Token : _, Posbility: 0.6875
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_
Next Token : amount, Posbility: 0.7383
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount
Next Token : _, Posbility: 0.5469
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_
Next Token : list, Posbility: 0.0820
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list 
Next Token : (, Posbility: 0.6133
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (
Next Token : amount, Posbility: 0.5039
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount
Next Token : _, Posbility: 0.4121
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_
Next Token : list, Posbility: 0.9844
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list
Next Token : ,, Posbility: 0.9492
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list,
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, 
Next Token : sale, Posbility: 0.9766
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_
Next Token : type, Posbility: 0.9727
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type
Next Token : ), Posbility: 0.8750
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type)
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =

Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  
Next Token : List, Posbility: 0.3789
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.
Next Token : fold, Posbility: 0.4961
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_
Next Token : left, Posbility: 0.9023
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left 
Next Token : (, Posbility: 0.7617
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (
Next Token : fun, Posbility: 0.8945
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun
Next Token :  acc, Posbility: 0.5859
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc
Next Token :  , Posbility: 0.5625
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc 
Next Token : x, Posbility: 0.4121
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x ->
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> 
Next Token : sale, Posbility: 0.8867
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_
Next Token : loss, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_
Next Token : amount, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount
Next Token :  , Posbility: 0.7109
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount 
Next Token : (, Posbility: 0.7305
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x
Next Token : ,, Posbility: 0.9688
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x,
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, 
Next Token : sale, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_
Next Token : type, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type
Next Token : ), Posbility: 0.7266
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type)
Next Token :  +, Posbility: 0.5430
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type) +
Next Token :  acc, Posbility: 0.9961
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type) + acc
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type) + acc)
Next Token :  0, Posbility: 0.8555
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type) + acc) 0
Next Token :  amount, Posbility: 0.9609
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type) + acc) 0 amount
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type) + acc) 0 amount_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function that gives loss amount on a sale if the given amount has loss else return 0. *)
let sale_loss_amount (amount, sale_type) =
  match sale_type with
  | SaleType.Regular -> amount
  | SaleType.Special -> 0
let sale_loss_amount_list (amount_list, sale_type) =
  List.fold_left (fun acc x -> sale_loss_amount (x, sale_type) + acc) 0 amount_list
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :4.346093416213989

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>