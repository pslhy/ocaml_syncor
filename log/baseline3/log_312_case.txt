code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let
Next Token :  rec, Posbility: 0.3418
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec
Next Token :  search, Posbility: 0.3086
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search
Next Token : _, Posbility: 0.4609
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_
Next Token : rec, Posbility: 0.1045
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec
Next Token :  , Posbility: 0.6406
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec 
Next Token : s, Posbility: 0.6289
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s
Next Token :  , Posbility: 0.3945
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s 
Next Token : p, Posbility: 0.3516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p
Next Token :  =, Posbility: 0.7656
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =

Next Token :   , Posbility: 0.8516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  
Next Token : match, Posbility: 0.4219
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match 
Next Token : p, Posbility: 0.5078
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p
Next Token :  with, Posbility: 0.9531
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with

Next Token :   , Posbility: 0.9375
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  |
Next Token :  [], Posbility: 0.3711
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | []
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] ->
Next Token :  , Posbility: 0.3730
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> 
Next Token : (, Posbility: 0.3535
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (
Next Token : s, Posbility: 0.3125
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s
Next Token : ,, Posbility: 0.9648
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s,
Next Token :  0,, Posbility: 0.7578
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0,
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, 
Next Token : s, Posbility: 0.4160
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s
Next Token : ., Posbility: 0.6914
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.
Next Token : Length, Posbility: 0.6875
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length
Next Token : ), Posbility: 0.8242
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  |
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | 
Next Token : _, Posbility: 0.4453
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ 
Next Token : ::, Posbility: 0.5391
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ ::
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: 
Next Token : p, Posbility: 0.2676
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p
Next Token : ', Posbility: 0.4238
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p'
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' 
Next Token : ->, Posbility: 0.9375
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->

Next Token :       , Posbility: 0.4824
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      
Next Token : let, Posbility: 0.6562
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let
Next Token :  , Posbility: 0.5273
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let 
Next Token : (, Posbility: 0.2070
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (
Next Token : s, Posbility: 0.1787
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s
Next Token : ',, Posbility: 0.4141
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s',
Next Token :  i, Posbility: 0.3711
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i
Next Token : ,, Posbility: 0.7383
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i,
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, 
Next Token : j, Posbility: 0.6133
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j)
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) =
Next Token :  search, Posbility: 0.8789
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_
Next Token : rec, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec 
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s 
Next Token : p, Posbility: 0.9492
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p'
Next Token :  in, Posbility: 0.9453
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in

Next Token :       , Posbility: 0.9727
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      
Next Token : if, Posbility: 0.5859
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if 
Next Token : s, Posbility: 0.3809
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s
Next Token : ., Posbility: 0.6250
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.
Next Token : [, Posbility: 0.4277
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[
Next Token : i, Posbility: 0.9766
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i
Next Token : ], Posbility: 0.8008
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i]
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] =
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = 
Next Token : p, Posbility: 0.8125
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p
Next Token : ., Posbility: 0.3516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.
Next Token : [0], Posbility: 0.9062
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0]
Next Token :  then, Posbility: 0.9219
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then
Next Token :  , Posbility: 0.7461
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then 
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s
Next Token : ',, Posbility: 0.6133
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s',
Next Token :  i, Posbility: 0.9883
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i
Next Token : ,, Posbility: 0.4160
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i,
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, 
Next Token : j, Posbility: 0.9727
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j
Next Token : ), Posbility: 0.8516
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j)
Next Token :  else, Posbility: 0.8438
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else
Next Token :  search, Posbility: 0.5430
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec 
Next Token : s, Posbility: 0.9219
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s 
Next Token : p, Posbility: 0.8789
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
Next Token : 
, Posbility: 0.7188
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p

Next Token :       , Posbility: 0.5977
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      
Next Token : else, Posbility: 0.9180
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else
Next Token :  , Posbility: 0.6562
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else 
Next Token : (, Posbility: 0.8828
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s
Next Token : ,, Posbility: 0.8945
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s,
Next Token :  i, Posbility: 0.6289
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i
Next Token : ,, Posbility: 0.8398
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i,
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, 
Next Token : j, Posbility: 0.9844
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j
Next Token : ), Posbility: 0.9258
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
Next Token : 
, Posbility: 0.5977
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)

Next Token :   , Posbility: 0.5781
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  
Next Token : |, Posbility: 0.9336
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  |
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | 
Next Token : _, Posbility: 0.8477
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ 
Next Token : ->, Posbility: 0.4961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ ->
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> 
Next Token : (, Posbility: 0.6797
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s
Next Token : ,, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s,
Next Token :  0,, Posbility: 0.6992
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s, 0,
Next Token :  , Posbility: 0.7148
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s, 0, 
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s, 0, s
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s, 0, s.
Next Token : Length, Posbility: 0.9961
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s, 0, s.Length
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. *)
let rec search_rec s p =
  match p with
  | [] -> (s, 0, s.Length)
  | _ :: p' ->
      let (s', i, j) = search_rec s p' in
      if s.[i] = p.[0] then (s', i, j) else search_rec s p
      else (s, i, j)
  | _ -> (s, 0, s.Length)
Error type: synerr_stop
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :4.254161834716797

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>