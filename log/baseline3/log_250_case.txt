code:
 (* Write a function to find the maximum product subarray of the given array. *)
let
Next Token :  rec, Posbility: 0.5781
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec
Next Token :  max, Posbility: 0.3340
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max
Next Token : _, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_
Next Token : product, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product
Next Token : _, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_
Next Token : sub, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_sub
Next Token : array, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray
Next Token :  , Posbility: 0.6016
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray 
Next Token : arr, Posbility: 0.3848
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr
Next Token :  =, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =

Next Token :   , Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  
Next Token : match, Posbility: 0.4004
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match 
Next Token : arr, Posbility: 0.7852
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr
Next Token :  with, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with

Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  
Next Token : |, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  |
Next Token :  [], Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | []
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] ->
Next Token :  , Posbility: 0.2520
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> 
Next Token : (0,, Posbility: 0.1992
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0,
Next Token :  0), Posbility: 0.4648
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  |
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | 
Next Token : x, Posbility: 0.4531
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x 
Next Token : ::, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x ::
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: 
Next Token : x, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: x
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs 
Next Token : ->, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
Next Token : 
, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->

Next Token :     , Posbility: 0.6016
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    
Next Token : let, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let
Next Token :  , Posbility: 0.5039
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let 
Next Token : (, Posbility: 0.4668
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (
Next Token : max, Posbility: 0.3262
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max
Next Token : _, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_
Next Token : left, Posbility: 0.1846
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left
Next Token : ,, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left,
Next Token :  max, Posbility: 0.7461
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_
Next Token : right, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right
Next Token : ), Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right)
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) =
Next Token :  max, Posbility: 0.6562
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_
Next Token : product, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_
Next Token : sub, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_sub
Next Token : array, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray 
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs
Next Token :  in, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in

Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    
Next Token : let, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let
Next Token :  , Posbility: 0.3594
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let 
Next Token : (, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (
Next Token : max, Posbility: 0.3301
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_
Next Token : left, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left
Next Token : ,, Posbility: 0.5547
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left,
Next Token :  max, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_
Next Token : right, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right)
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
Next Token : 
, Posbility: 0.4082
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =

Next Token :       , Posbility: 0.5039
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      
Next Token : if, Posbility: 0.3887
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if
Next Token :  max, Posbility: 0.5898
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_
Next Token : left, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left
Next Token :  , Posbility: 0.4668
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left 
Next Token : >, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left >
Next Token :  max, Posbility: 0.6992
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_
Next Token : right, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right
Next Token :  then, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then
Next Token :  , Posbility: 0.5703
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then 
Next Token : (, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (
Next Token : max, Posbility: 0.8008
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_
Next Token : left, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left
Next Token : ,, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left,
Next Token :  max, Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_
Next Token : right, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right)
Next Token :  else, Posbility: 0.6211
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_
Next Token : right, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right,
Next Token :  max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_
Next Token : left, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left
Next Token : ), Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
Next Token : 
, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)

Next Token :    , Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
   
Next Token :  in, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
Next Token : 
, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in

Next Token :     , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    
Next Token : let, Posbility: 0.5664
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let 
Next Token : (, Posbility: 0.5312
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (
Next Token : max, Posbility: 0.5352
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_
Next Token : left, Posbility: 0.9062
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left
Next Token : ,, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left,
Next Token :  max, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_
Next Token : right, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right
Next Token : ), Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right)
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
Next Token : 
, Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =

Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      
Next Token : if, Posbility: 0.6562
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if
Next Token :  max, Posbility: 0.5977
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_
Next Token : left, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left
Next Token :  , Posbility: 0.4160
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left 
Next Token : >, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left >
Next Token :  max, Posbility: 0.6523
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_
Next Token : right, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right
Next Token :  then, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then 
Next Token : (, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (
Next Token : max, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_
Next Token : left, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left
Next Token : ,, Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left,
Next Token :  max, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_
Next Token : right, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right)
Next Token :  else, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (
Next Token : max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right
Next Token : ,, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right,
Next Token :  max, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_
Next Token : left, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
Next Token : 
, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)

Next Token :    , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
   
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in

Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    
Next Token : (, Posbility: 0.4102
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (
Next Token : max, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_
Next Token : left, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left
Next Token :  *, Posbility: 0.5977
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left *
Next Token :  max, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_
Next Token : right, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right
Next Token : ,, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right,
Next Token :  max, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max_
Next Token : left, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max_left
Next Token :  *, Posbility: 0.5430
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max_left *
Next Token :  max, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max_left * max
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max_left * max_
Next Token : right, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max_left * max_right
Next Token : ), Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the maximum product subarray of the given array. *)
let rec max_product_subarray arr =
  match arr with
  | [] -> (0, 0)
  | x :: xs ->
    let (max_left, max_right) = max_product_subarray xs in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    let (max_left, max_right) =
      if max_left > max_right then (max_left, max_right) else (max_right, max_left)
    in
    (max_left * max_right, max_left * max_right)
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :6.442397117614746

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>