code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let
Next Token :  rec, Posbility: 0.4531
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec
Next Token :  find, Posbility: 0.2871
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find
Next Token : _, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_
Next Token : first, Posbility: 0.5117
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_
Next Token : non, Posbility: 0.5938
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_
Next Token : repeated, Posbility: 0.6250
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated
Next Token : _, Posbility: 0.6875
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_
Next Token : char, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char
Next Token :  , Posbility: 0.5938
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char 
Next Token : s, Posbility: 0.6445
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s
Next Token :  =, Posbility: 0.8594
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =

Next Token :   , Posbility: 0.7852
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  
Next Token : let, Posbility: 0.3613
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let
Next Token :  rec, Posbility: 0.4160
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec
Next Token :  , Posbility: 0.2930
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec 
Next Token : helper, Posbility: 0.2676
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper 
Next Token : s, Posbility: 0.6445
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s
Next Token :  =, Posbility: 0.4121
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =

Next Token :     , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    
Next Token : if, Posbility: 0.3770
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if
Next Token :  String, Posbility: 0.4961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.
Next Token : length, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length 
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s
Next Token :  , Posbility: 0.4082
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s 
Next Token : <, Posbility: 0.6758
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s <
Next Token :  , Posbility: 0.3262
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 
Next Token : 2, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2
Next Token :  then, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then 
Next Token : s, Posbility: 0.3633
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
Next Token : 
, Posbility: 0.5820
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s

Next Token :     , Posbility: 0.7500
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else
Next Token :  , Posbility: 0.7070
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else 
Next Token : if, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if
Next Token :  , Posbility: 0.4414
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if 
Next Token : s, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s
Next Token :  =, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s =
Next Token :  "", Posbility: 0.4727
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = ""
Next Token :  then, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then
Next Token :  , Posbility: 0.3770
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then 
Next Token : s, Posbility: 0.6953
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
Next Token : 
, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s

Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else
Next Token :  , Posbility: 0.8047
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else 
Next Token : if, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if 
Next Token : s, Posbility: 0.6016
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s
Next Token :  =, Posbility: 0.6836
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s =
Next Token :  , Posbility: 0.4219
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = 
Next Token : s, Posbility: 0.4883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s
Next Token : [0], Posbility: 0.5547
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0]
Next Token :  then, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then 
Next Token : helper, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper 
Next Token : (, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (
Next Token : String, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.
Next Token : sub, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s
Next Token :  1, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1
Next Token :  , Posbility: 0.5664
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 
Next Token : (, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (
Next Token : String, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.
Next Token : length, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length 
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s -
Next Token :  1)), Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else 
Next Token : if, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if
Next Token :  , Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if 
Next Token : s, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s
Next Token :  =, Posbility: 0.6797
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s =
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = 
Next Token : s, Posbility: 0.7891
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s
Next Token : [0], Posbility: 0.4355
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0]
Next Token :  , Posbility: 0.8125
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] 
Next Token : ^, Posbility: 0.5508
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ 
Next Token : s, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s
Next Token : [1], Posbility: 0.8594
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1]
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then 
Next Token : helper, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper 
Next Token : (, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (
Next Token : String, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.
Next Token : sub, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s
Next Token :  , Posbility: 0.4961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s 
Next Token : -, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s -
Next Token :  , Posbility: 0.4980
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2
Next Token : )), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else 
Next Token : helper, Posbility: 0.5547
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper 
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (
Next Token : String, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.
Next Token : sub, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub 
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s
Next Token :  1, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (
Next Token : String, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length 
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s -
Next Token :  1)), Posbility: 0.8633
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))

Next Token :   , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
  
Next Token : in, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
  in
Next Token : 
, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
  in

Next Token :   , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
  in
  
Next Token : helper, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
  in
  helper
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
  in
  helper 
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the first non-repeated character in a given string. *)
let rec find_first_non_repeated_char s =
  let rec helper s =
    if String.length s < 2 then s
    else if s = "" then s
    else if s = s[0] then helper (String.sub s 1 (String.length s - 1))
    else if s = s[0] ^ s[1] then helper (String.sub s 2 (String.length s - 2))
    else helper (String.sub s 1 (String.length s - 1))
  in
  helper s
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :5.637646675109863

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>