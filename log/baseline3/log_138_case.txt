code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let
Next Token :  rec, Posbility: 0.6328
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec
Next Token :  , Posbility: 0.7188
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec 
Next Token : split, Posbility: 0.7852
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split
Next Token : _, Posbility: 0.5469
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_
Next Token : list, Posbility: 0.4297
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list
Next Token :  , Posbility: 0.6562
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list 
Next Token : n, Posbility: 0.2695
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n
Next Token :  , Posbility: 0.2715
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n 
Next Token : lst, Posbility: 0.3262
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst
Next Token :  =, Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
Next Token : 
, Posbility: 0.8516
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =

Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  
Next Token : match, Posbility: 0.5391
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match 
Next Token : lst, Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with

Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  
Next Token : |, Posbility: 0.9688
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  |
Next Token :  [], Posbility: 0.9492
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | []
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] ->
Next Token :  [], Posbility: 0.7891
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  |
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | 
Next Token : x, Posbility: 0.3398
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x 
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x ::
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: 
Next Token : x, Posbility: 0.8320
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: x
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs 
Next Token : ->, Posbility: 0.9727
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
Next Token : 
, Posbility: 0.5078
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->

Next Token :       , Posbility: 0.6250
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      
Next Token : let, Posbility: 0.4785
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let 
Next Token : x, Posbility: 0.2637
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let x
Next Token : s, Posbility: 0.5547
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs
Next Token : _, Posbility: 0.3320
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_
Next Token : split, Posbility: 0.2188
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split
Next Token :  =, Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split =
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = 
Next Token : split, Posbility: 0.7773
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list 
Next Token : n, Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n 
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs
Next Token :  in, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in

Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      
Next Token : let, Posbility: 0.3066
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let 
Next Token : x, Posbility: 0.4395
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x
Next Token : _, Posbility: 0.5586
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_
Next Token : split, Posbility: 0.8047
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split
Next Token :  =, Posbility: 0.8203
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split =
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = 
Next Token : x, Posbility: 0.4473
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x
Next Token :  , Posbility: 0.3691
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x 
Next Token : ::, Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x ::
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: 
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: x
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split
Next Token :  in, Posbility: 0.9609
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      
Next Token : x, Posbility: 0.5195
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_
Next Token : split, Posbility: 1.0000
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
Next Token : 
, Posbility: 0.4531
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split

Next Token :   , Posbility: 0.6406
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  
Next Token : |, Posbility: 0.8398
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  |
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | 
Next Token : _, Posbility: 0.4648
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ 
Next Token : ->, Posbility: 0.7266
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ ->
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ -> 
Next Token : assert, Posbility: 0.2910
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ -> assert
Next Token :  false, Posbility: 0.9062
---------------------------
code:
 (* Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. *)
let rec split_list n lst =
  match lst with
  | [] -> []
  | x :: xs ->
      let xs_split = split_list n xs in
      let x_split = x :: xs_split in
      x_split
  | _ -> assert false
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :3.7674152851104736

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>