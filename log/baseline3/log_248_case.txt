code:
 (* Write a  function to count the upper case characters in a given string. *)
let
Next Token :  count, Posbility: 0.3926
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count
Next Token : _, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_
Next Token : upper, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper
Next Token : _, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_
Next Token : case, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case
Next Token : _, Posbility: 0.4727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_
Next Token : char, Posbility: 0.6445
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_char
Next Token : s, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars 
Next Token : s, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
Next Token : 
, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =

Next Token :   , Posbility: 0.8242
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  
Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let
Next Token :  , Posbility: 0.3555
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let 
Next Token : upper, Posbility: 0.2148
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper
Next Token : _, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_
Next Token : case, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case
Next Token : _, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_
Next Token : char, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_char
Next Token : s, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
Next Token : 
, Posbility: 0.2002
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =

Next Token :     , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    
Next Token : let, Posbility: 0.3633
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let
Next Token :  , Posbility: 0.3906
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let 
Next Token : upper, Posbility: 0.3164
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_
Next Token : case, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case
Next Token : _, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_
Next Token : char, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_char
Next Token : s, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars
Next Token :  =, Posbility: 0.8555
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars =
Next Token :  , Posbility: 0.3438
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = 
Next Token : ref, Posbility: 0.5742
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref
Next Token :  0, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0
Next Token :  in, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in

Next Token :     , Posbility: 0.9023
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    
Next Token : let, Posbility: 0.6719
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let
Next Token :  rec, Posbility: 0.5820
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec
Next Token :  count, Posbility: 0.3262
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count
Next Token : _, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_
Next Token : char, Posbility: 0.4199
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_char
Next Token : s, Posbility: 0.5195
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars 
Next Token : s, Posbility: 0.6562
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s
Next Token :  =, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =

Next Token :       , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      
Next Token : match, Posbility: 0.3652
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match 
Next Token : s, Posbility: 0.7070
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s
Next Token :  with, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with

Next Token :       , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      |
Next Token :  [], Posbility: 0.5547
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | []
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] ->
Next Token :  , Posbility: 0.8320
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> 
Next Token : upper, Posbility: 0.4609
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_char
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
Next Token : 
, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars

Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      |
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | 
Next Token : c, Posbility: 0.4785
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c
Next Token :  , Posbility: 0.5117
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c 
Next Token : ::, Posbility: 0.7734
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c ::
Next Token :  , Posbility: 0.7734
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: 
Next Token : cs, Posbility: 0.4629
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs 
Next Token : ->, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
Next Token : 
, Posbility: 0.7070
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->

Next Token :           , Posbility: 0.7891
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          
Next Token : if, Posbility: 0.3652
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if
Next Token :  , Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if 
Next Token : Char, Posbility: 0.4844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.
Next Token : is, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_
Next Token : upper, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper
Next Token : _, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_
Next Token : case, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case 
Next Token : c, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
Next Token : 
, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then

Next Token :             , Posbility: 0.7070
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            
Next Token : count, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_char
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars 
Next Token : cs, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
Next Token : 
, Posbility: 0.5117
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs

Next Token :           , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else

Next Token :             , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            
Next Token : count, Posbility: 0.3926
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_char
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars 
Next Token : (, Posbility: 0.4961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (
Next Token : Char, Posbility: 0.3457
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.
Next Token : to, Posbility: 0.5664
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_
Next Token : string, Posbility: 0.4434
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string 
Next Token : c, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c
Next Token : ), Posbility: 0.6875
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
Next Token : 
, Posbility: 0.5781
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)

Next Token :       , Posbility: 0.3145
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      
Next Token : |, Posbility: 0.7109
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      |
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | 
Next Token : _, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ 
Next Token : ->, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ ->
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> 
Next Token : upper, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_char
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
Next Token : 
, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars

Next Token :    , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
   
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in

Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    
Next Token : count, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_char
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars 
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s

Next Token :   , Posbility: 0.7461
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  
Next Token : in, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
  
Next Token : upper, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
  upper
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
  upper_
Next Token : case, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
  upper_case
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
  upper_case_
Next Token : char, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
  upper_case_char
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the upper case characters in a given string. *)
let count_upper_case_chars s =
  let upper_case_chars =
    let upper_case_chars = ref 0 in
    let rec count_chars s =
      match s with
      | [] -> upper_case_chars
      | c :: cs ->
          if Char.is_upper_case c then
            count_chars cs
          else
            count_chars (Char.to_string c)
      | _ -> upper_case_chars
    in
    count_chars s
  in
  upper_case_chars
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :4.942047834396362

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>