code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let
Next Token :  rec, Posbility: 0.4668
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec
Next Token :  left, Posbility: 0.2969
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left
Next Token : _, Posbility: 0.8945
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_
Next Token : insertion, Posbility: 0.6406
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion
Next Token : _, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_
Next Token : point, Posbility: 0.7305
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point
Next Token :  , Posbility: 0.4297
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point 
Next Token : (, Posbility: 0.2119
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (
Next Token : x, Posbility: 0.0845
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x
Next Token :  , Posbility: 0.4531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x 
Next Token : :, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x :
Next Token :  int, Posbility: 0.7422
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int
Next Token : ), Posbility: 0.6250
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int)
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) 
Next Token : (, Posbility: 0.6562
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (
Next Token : l, Posbility: 0.1016
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l :
Next Token :  int, Posbility: 0.6719
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int
Next Token :  list, Posbility: 0.5547
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list)
Next Token :  =, Posbility: 0.6328
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
Next Token : 
, Posbility: 0.8281
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =

Next Token :   , Posbility: 0.8438
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  
Next Token : match, Posbility: 0.4941
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match
Next Token :  l, Posbility: 0.6719
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l
Next Token :  with, Posbility: 0.9336
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with

Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  
Next Token : |, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  |
Next Token :  [], Posbility: 0.9336
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | []
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] ->
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> 
Next Token : x, Posbility: 0.3516
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
Next Token : 
, Posbility: 0.7734
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  |
Next Token :  , Posbility: 0.7617
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | 
Next Token : x, Posbility: 0.5586
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x
Next Token : ::, Posbility: 0.6211
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::
Next Token : l, Posbility: 0.4629
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l
Next Token :  , Posbility: 0.5469
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l 
Next Token : ->, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
Next Token : 
, Posbility: 0.4297
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->

Next Token :       , Posbility: 0.5156
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      
Next Token : if, Posbility: 0.5430
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if 
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x 
Next Token : <, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x <
Next Token :  l, Posbility: 0.6367
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l
Next Token : [0], Posbility: 0.4316
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0]
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
Next Token : 
, Posbility: 0.4219
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then

Next Token :         , Posbility: 0.8086
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        
Next Token : left, Posbility: 0.5625
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_
Next Token : insertion, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_
Next Token : point, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point 
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x
Next Token :  l, Posbility: 0.9180
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
Next Token : 
, Posbility: 0.6094
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l

Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      
Next Token : else, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else

Next Token :         , Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        
Next Token : left, Posbility: 0.2539
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_
Next Token : insertion, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_
Next Token : point, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point
Next Token :  , Posbility: 0.6055
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point 
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (
Next Token : l, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l 
Next Token : -, Posbility: 0.8750
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l -
Next Token :  1), Posbility: 0.6484
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
Next Token : 
, Posbility: 0.5781
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)

Next Token : let, Posbility: 0.4492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let
Next Token :  rec, Posbility: 0.6133
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec
Next Token :  left, Posbility: 0.2852
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_
Next Token : insertion, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_
Next Token : point, Posbility: 0.9297
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point
Next Token : _, Posbility: 0.8164
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_
Next Token : rec, Posbility: 0.1260
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec
Next Token :  , Posbility: 0.8125
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec 
Next Token : (, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (
Next Token : x, Posbility: 0.8984
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x :
Next Token :  int, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int)
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) 
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (
Next Token : l, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l :
Next Token :  int, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int
Next Token :  list, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list)
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =

Next Token :   , Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  
Next Token : match, Posbility: 0.5352
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match
Next Token :  l, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  |
Next Token :  [], Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | []
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] ->
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  |
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | 
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x
Next Token : ::, Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::
Next Token : l, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->

Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      
Next Token : if, Posbility: 0.9336
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x 
Next Token : <, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x <
Next Token :  l, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l
Next Token : [0], Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0]
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then

Next Token :         , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        
Next Token : left, Posbility: 0.9180
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_
Next Token : insertion, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_
Next Token : point, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point
Next Token : _, Posbility: 0.8555
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x
Next Token :  l, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l

Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else

Next Token :         , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        
Next Token : left, Posbility: 0.8438
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_
Next Token : insertion, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_
Next Token : point, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l -
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
Next Token : 
, Posbility: 0.6406
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)

Next Token : let, Posbility: 0.7188
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let
Next Token :  rec, Posbility: 0.4883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec
Next Token :  left, Posbility: 0.5430
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_
Next Token : insertion, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_
Next Token : point, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point
Next Token : _, Posbility: 0.8906
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_
Next Token : iter, Posbility: 0.4941
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter 
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int)
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (
Next Token : l, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list)
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =

Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  
Next Token : let, Posbility: 0.4219
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 0.4746
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 0.3496
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 0.4453
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 0.5352
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 0.2598
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 0.9180
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 0.8516
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int
Next Token :  list, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list)
Next Token :  =, Posbility: 0.5195
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =

Next Token :     , Posbility: 0.9453
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    
Next Token : match, Posbility: 0.7031
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match
Next Token :  l, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with

Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    |
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | []
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] ->
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> 
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    |
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | 
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x
Next Token : ::, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::
Next Token : l, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->

Next Token :         , Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        
Next Token : if, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x 
Next Token : <, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x <
Next Token :  l, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l
Next Token : [0], Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0]
Next Token :  then, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
Next Token : 
, Posbility: 0.9062
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then

Next Token :           , Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          
Next Token : loop, Posbility: 0.6836
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x
Next Token :  l, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else

Next Token :           , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          
Next Token : loop, Posbility: 0.8477
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l -
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)

Next Token :   , Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  
Next Token : in, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
Next Token : 
, Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in

Next Token :   , Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  
Next Token : loop, Posbility: 0.9531
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x
Next Token :  l, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
Next Token : 
, Posbility: 0.7812
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l

Next Token : let, Posbility: 0.5391
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let
Next Token :  rec, Posbility: 0.7227
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec
Next Token :  left, Posbility: 0.6484
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_
Next Token : insertion, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_
Next Token : point, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_
Next Token : iter, Posbility: 0.7070
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter
Next Token : _, Posbility: 0.6016
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_
Next Token : rec, Posbility: 0.2158
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int)
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list)
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =

Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list)
Next Token :  =, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    
Next Token : match, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    |
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] ->
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    |
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::
Next Token : l, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->

Next Token :         , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        
Next Token : if, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x <
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          
Next Token : loop, Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x
Next Token :  l, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          
Next Token : loop, Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)

Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  
Next Token : loop, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
Next Token : 
, Posbility: 0.8281
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l

Next Token : let, Posbility: 0.6875
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let
Next Token :  rec, Posbility: 0.8594
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec
Next Token :  left, Posbility: 0.8828
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_
Next Token : insertion, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_
Next Token : point, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_
Next Token : iter, Posbility: 0.8867
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter
Next Token : _, Posbility: 0.9141
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_
Next Token : iter, Posbility: 0.2539
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list)
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =

Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  
Next Token : let, Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 0.8945
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 0.9609
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 0.9297
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int
Next Token :  list, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list)
Next Token :  =, Posbility: 0.8555
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =

Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    
Next Token : match, Posbility: 0.8359
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match
Next Token :  l, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with

Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    |
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] ->
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    |
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::
Next Token : l, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->

Next Token :         , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        
Next Token : if, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x <
Next Token :  l, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          
Next Token : loop, Posbility: 0.9258
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x
Next Token :  l, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else

Next Token :           , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          
Next Token : loop, Posbility: 0.9062
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop 
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)

Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  
Next Token : loop, Posbility: 0.8906
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x
Next Token :  l, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l

Next Token : let, Posbility: 0.6211
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let
Next Token :  rec, Posbility: 0.8672
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec
Next Token :  left, Posbility: 0.8789
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_
Next Token : insertion, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_
Next Token : point, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_
Next Token : iter, Posbility: 0.8555
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_
Next Token : iter, Posbility: 0.7344
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter
Next Token : _, Posbility: 0.6992
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_
Next Token : rec, Posbility: 0.3438
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list)
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list)
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        
Next Token : if, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x <
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          
Next Token : loop, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          
Next Token : loop, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  
Next Token : loop, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
Next Token : 
, Posbility: 0.8438
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l

Next Token : let, Posbility: 0.6875
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let
Next Token :  rec, Posbility: 0.8945
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec
Next Token :  left, Posbility: 0.8906
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_
Next Token : insertion, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_
Next Token : point, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_
Next Token : iter, Posbility: 0.8672
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_
Next Token : iter, Posbility: 0.8750
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_
Next Token : iter, Posbility: 0.4668
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list)
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  
Next Token : let, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list)
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x <
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          
Next Token : loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          
Next Token : loop, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  
Next Token : loop, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
Next Token : 
, Posbility: 0.8750
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l

Next Token : let, Posbility: 0.7109
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let
Next Token :  rec, Posbility: 0.9297
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec
Next Token :  left, Posbility: 0.9023
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_
Next Token : insertion, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_
Next Token : point, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_
Next Token : iter, Posbility: 0.8477
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_
Next Token : iter, Posbility: 0.8984
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_
Next Token : iter, Posbility: 0.9453
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_
Next Token : rec, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list)
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list)
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x <
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          
Next Token : loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          
Next Token : loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  
Next Token : loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
Next Token : 
, Posbility: 0.8867
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l

Next Token : let, Posbility: 0.7305
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let
Next Token :  rec, Posbility: 0.9336
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec
Next Token :  left, Posbility: 0.9414
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_
Next Token : insertion, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_
Next Token : point, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_
Next Token : iter, Posbility: 0.8945
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_
Next Token : iter, Posbility: 0.9453
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_
Next Token : iter, Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_
Next Token : iter, Posbility: 0.9375
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list)
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list)
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    |
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | []
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] ->
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x

Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    |
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        
Next Token : if, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x <
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l
Next Token : [0], Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0]
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          
Next Token : loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l

Next Token :         , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else

Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          
Next Token : loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l 
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l -
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  
Next Token : loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop 
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x
Next Token :  l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l

Next Token : let, Posbility: 0.7695
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let
Next Token :  rec, Posbility: 0.9688
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec
Next Token :  left, Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_
Next Token : insertion, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_
Next Token : point, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_
Next Token : iter, Posbility: 0.9219
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_
Next Token : iter, Posbility: 0.9570
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_
Next Token : iter, Posbility: 0.9922
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_
Next Token : iter, Posbility: 0.9805
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_
Next Token : rec, Posbility: 0.9492
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list)
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =

Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let
Next Token :  rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec
Next Token :  loop, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int)
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) 
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l 
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l :
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/-exercises/data-structures-and-algorithms/-data-structure-exercise-24.php *)
let rec left_insertion_point (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point x l
      else
        left_insertion_point x (l - 1)
let rec left_insertion_point_rec (x : int) (l : int list) =
  match l with
  | [] -> x
  | x::l ->
      if x < l[0] then
        left_insertion_point_rec x l
      else
        left_insertion_point_rec x (l - 1)
let rec left_insertion_point_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter (x : int) (l : int list) =
  let rec loop (x : int) (l : int list) =
    match l with
    | [] -> x
    | x::l ->
        if x < l[0] then
          loop x l
        else
          loop x (l - 1)
  in
  loop x l
let rec left_insertion_point_iter_iter_iter_iter_rec (x : int) (l : int list) =
  let rec loop (x : int) (l : int


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>