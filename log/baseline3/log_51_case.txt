code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let
Next Token :  rec, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec
Next Token :  , Posbility: 0.4727
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec 
Next Token : freq, Posbility: 0.3438
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq
Next Token : _, Posbility: 0.3418
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_
Next Token : list, Posbility: 0.2129
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list
Next Token :  , Posbility: 0.3008
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list 
Next Token : x, Posbility: 0.1729
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list x
Next Token : s, Posbility: 0.4336
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs
Next Token :  =, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =

Next Token :   , Posbility: 0.8281
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  
Next Token : match, Posbility: 0.5234
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match 
Next Token : x, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match x
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with

Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  
Next Token : |, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  |
Next Token :  [], Posbility: 0.9258
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | []
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] ->
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> 
Next Token : Dict, Posbility: 0.1777
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.
Next Token : create, Posbility: 0.4043
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
Next Token : 
, Posbility: 0.3301
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create

Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  |
Next Token :  , Posbility: 0.7930
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | 
Next Token : x, Posbility: 0.6289
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x 
Next Token : ::, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x ::
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: 
Next Token : x, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: x
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs 
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
Next Token : 
, Posbility: 0.6016
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->

Next Token :       , Posbility: 0.5039
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      
Next Token : let, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let
Next Token :  , Posbility: 0.4766
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let 
Next Token : freq, Posbility: 0.2891
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq
Next Token :  =, Posbility: 0.6953
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq =
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = 
Next Token : Dict, Posbility: 0.4609
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.
Next Token : get, Posbility: 0.3906
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get 
Next Token : x, Posbility: 0.7422
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x 
Next Token : freq, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list 
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs
Next Token :  in, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in

Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      
Next Token : Dict, Posbility: 0.4980
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.
Next Token : add, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add 
Next Token : x, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x 
Next Token : (, Posbility: 0.6055
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (
Next Token : freq, Posbility: 0.7227
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq
Next Token :  +, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq +
Next Token :  1), Posbility: 0.9414
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1)
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1) 
Next Token : freq, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1) freq
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1) freq_
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1) freq_list
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1) freq_list 
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1) freq_list x
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
  | x :: xs ->
      let freq = Dict.get x freq_list xs in
      Dict.add x (freq + 1) freq_list xs
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END--------

processing time : :3.199450969696045

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>