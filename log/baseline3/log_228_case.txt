code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let
Next Token :  rec, Posbility: 0.3359
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec
Next Token :  , Posbility: 0.3105
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec 
Next Token : ad, Posbility: 0.4414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec ad
Next Token : verb, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb
Next Token : _, Posbility: 0.5977
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_
Next Token : pos, Posbility: 0.1982
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos
Next Token :  , Posbility: 0.3633
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos 
Next Token : s, Posbility: 0.3770
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s
Next Token :  =, Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
Next Token : 
, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =

Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  
Next Token : let, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let
Next Token :  , Posbility: 0.3418
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let 
Next Token : ad, Posbility: 0.2432
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let ad
Next Token : verb, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverb
Next Token : s, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs
Next Token :  =, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs =
Next Token :  , Posbility: 0.4414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = 
Next Token : List, Posbility: 0.3477
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.
Next Token : filter, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter 
Next Token : (, Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (
Next Token : fun, Posbility: 0.6055
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun 
Next Token : x, Posbility: 0.3926
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x ->
Next Token :  , Posbility: 0.7227
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> 
Next Token : x, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x 
Next Token : <, Posbility: 0.3672
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <
Next Token : >, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <>
Next Token :  ", Posbility: 0.5703
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "
Next Token : and, Posbility: 0.1406
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and
Next Token : "), Posbility: 0.5078
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and")
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") 
Next Token : s, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s
Next Token :  in, Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in

Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  
Next Token : let, Posbility: 0.4844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let
Next Token :  , Posbility: 0.2910
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let 
Next Token : ad, Posbility: 0.4512
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let ad
Next Token : verb, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb
Next Token : _, Posbility: 0.3887
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_
Next Token : pos, Posbility: 0.4414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos
Next Token : _, Posbility: 0.2812
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_
Next Token : helper, Posbility: 0.1494
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper
Next Token :  , Posbility: 0.5703
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper 
Next Token : s, Posbility: 0.3594
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s
Next Token :  =, Posbility: 0.3086
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =

Next Token :     , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    
Next Token : let, Posbility: 0.3457
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let
Next Token :  , Posbility: 0.3496
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let 
Next Token : ad, Posbility: 0.4062
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let ad
Next Token : verb, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverb
Next Token : s, Posbility: 0.5469
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs
Next Token :  =, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs =
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = 
Next Token : List, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.
Next Token : filter, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter 
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x ->
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> 
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x 
Next Token : <, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <>
Next Token :  ", Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "
Next Token : and, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and
Next Token : "), Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and")
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") 
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s
Next Token :  in, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in

Next Token :     , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    
Next Token : if, Posbility: 0.4434
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if 
Next Token : List, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.
Next Token : length, Posbility: 0.4121
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length 
Next Token : ad, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverb
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs
Next Token :  , Posbility: 0.4102
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs 
Next Token : >, Posbility: 0.4980
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs >
Next Token :  0, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0
Next Token :  then, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
Next Token : 
, Posbility: 0.7773
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then

Next Token :       , Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      
Next Token : let, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let
Next Token :  , Posbility: 0.3828
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let 
Next Token : ad, Posbility: 0.5078
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let ad
Next Token : verb, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb
Next Token :  =, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb =
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = 
Next Token : ad, Posbility: 0.6094
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverb
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs
Next Token : ., Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.
Next Token : [0], Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0]
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in

Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      
Next Token : let, Posbility: 0.6680
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let
Next Token :  , Posbility: 0.3516
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let 
Next Token : ad, Posbility: 0.5234
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let ad
Next Token : verb, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_
Next Token : pos, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos
Next Token :  =, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos =
Next Token :  , Posbility: 0.6641
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = 
Next Token : List, Posbility: 0.5938
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.
Next Token : find, Posbility: 0.3379
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find
Next Token :  , Posbility: 0.4844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find 
Next Token : (, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (
Next Token : fun, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun 
Next Token : x, Posbility: 0.7109
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x 
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x ->
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> 
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x
Next Token :  =, Posbility: 0.4746
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x =
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb)
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) 
Next Token : s, Posbility: 0.8203
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s
Next Token :  in, Posbility: 0.8047
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in

Next Token :       , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      
Next Token : if, Posbility: 0.3027
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if 
Next Token : ad, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos
Next Token :  , Posbility: 0.5391
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos 
Next Token : <, Posbility: 0.6484
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <
Next Token : >, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <>
Next Token :  None, Posbility: 0.3711
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None
Next Token :  then, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
Next Token : 
, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then

Next Token :         , Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        
Next Token : let, Posbility: 0.4941
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let
Next Token :  , Posbility: 0.4668
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let 
Next Token : ad, Posbility: 0.5234
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let ad
Next Token : verb, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb
Next Token : _, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_
Next Token : pos, Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos
Next Token :  =, Posbility: 0.5625
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos =
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = 
Next Token : ad, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.4766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 0.1147
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.4121
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.1426
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.4375
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.4258
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.4004
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.4902
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.6875
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.5625
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.5430
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.8750
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.1523
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.6680
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.4375
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.5742
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.8359
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.7812
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.8086
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.4199
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.7656
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.4648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.4863
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.8906
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.6445
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.7305
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.7344
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.7734
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8320
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let 
Next Token : ad, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos =
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = 
Next Token : ad, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = ad
Next Token : verb, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_
Next Token : pos, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(
Next Token : *, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(*
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* 
Next Token : Position, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position
Next Token :  *), Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *)
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in

Next Token :         , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the first adverb and their positions in a given sentence. *)
let rec adverb_pos s =
  let adverbs = List.filter (fun x -> x <> "and") s in
  let adverb_pos_helper s =
    let adverbs = List.filter (fun x -> x <> "and") s in
    if List.length adverbs > 0 then
      let adverb = adverbs.[0] in
      let adverb_pos = List.find (fun x -> x = adverb) s in
      if adverb_pos <> None then
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let adverb_pos = adverb_pos.(* Position *) in
        let


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>